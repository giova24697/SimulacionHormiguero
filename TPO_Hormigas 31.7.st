SimpleButtonMorph subclass: #BotonAccion	instanceVariableNames: 'bloque bloqueAccion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!BotonAccion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/29/2017 22:23'!mouseUp: unEventosuper mouseUp: unEvento.bloqueAccion value.! !!BotonAccion methodsFor: 'as yet unclassified' stamp: 'Anonymous 6/29/2017 22:23'!mouseAction: unBloquebloqueAccion := unBloque.! !SimpleButtonMorph subclass: #BotonMatrizVisual	instanceVariableNames: 'bloque bloqueAccion posicion'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!BotonMatrizVisual methodsFor: 'as yet unclassified' stamp: 'u 7/31/2017 10:00'!agregarPosicion: unaPosposicion := unaPos 	! !!BotonMatrizVisual methodsFor: 'as yet unclassified' stamp: 'u 7/31/2017 10:30'!miPosicion^posicion ! !!BotonMatrizVisual methodsFor: 'as yet unclassified' stamp: 'u 7/31/2017 10:03'!mouseUp: unEvento	super mouseUp: unEvento.	bloqueAccion value! !!BotonMatrizVisual methodsFor: 'as yet unclassified' stamp: 'u 7/31/2017 10:03'!mouseAction: unBloque	bloqueAccion := unBloque! !!BotonMatrizVisual methodsFor: 'as yet unclassified' stamp: 'u 7/5/2017 10:50'!initialize	super initialize.	self label: ''.	self borderWidth: 2.	self borderColor: Color transparent. 	bounds := 0 @ 0 corner: 65 @ 65.	self useSquareCorners! !ImageMorph subclass: #FuenteVisual	instanceVariableNames: 'unaFuente'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!FuenteVisual methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 17:24'!iniciarFuenteVisual: unaFuenteV	| imagen |	super initialize.	unaFuente := unaFuenteV.	imagen := Form fromFileNamed: '\Users\Giovanni Sicolo\Desktop\ParteNueva\cuboAzucar.png'.	self form: imagen! !!FuenteVisual methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 12:04'!update: unObjeto	unObjeto estaViva = false		ifTrue: [ self visible: false ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FuenteVisual class	instanceVariableNames: ''!!FuenteVisual class methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 12:02'!crearFuenteVisual: unaFuente	| temp |	temp := self new.	temp iniciarFuenteVisual: unaFuente.	^ temp! !ImageMorph subclass: #HormigaVisual	instanceVariableNames: 'unaHormiga matrizMov'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!HormigaVisual methodsFor: 'as yet unclassified' stamp: 'u 7/7/2017 20:21'!iniciarHormiga: unaHorm matriz: unaMatriz	| imagen |	super initialize.	imagen := Form fromFileNamed: '\Users\Giovanni Sicolo\Desktop\ParteNueva\HormigaGMarron.png'.	unaHormiga := unaHorm.	matrizMov := unaMatriz.	self form: imagen.	self color: unaHorm getColor.	self visible: false.! !!HormigaVisual methodsFor: 'as yet unclassified' stamp: 'u 7/7/2017 21:19'!update: unObjeto	(matrizMov at: unObjeto miPosicion getFila at: unObjeto miPosicion getCol) position = self position		ifFalse: [ self position: (matrizMov at: unObjeto miPosicion getFila at: unObjeto miPosicion getCol) position ].	unObjeto posMiHorm = unObjeto miPosicion		ifTrue: [ self visible: false ]		ifFalse: [ self visible: true ].	unObjeto estaViva		ifFalse: [ self visible: false ]! !!HormigaVisual methodsFor: 'as yet unclassified' stamp: 'u 7/7/2017 19:47'!iniciarHormiga: unaHorm	| imagen |	super initialize.	imagen := Form		fromFileNamed: '\Users\Giovanni Sicolo\Desktop\ParteNueva\HormigaGMarron.png'.	unaHormiga := unaHorm.	self form: imagen.	self color: unaHorm getColor! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HormigaVisual class	instanceVariableNames: ''!!HormigaVisual class methodsFor: 'as yet unclassified' stamp: 'u 7/7/2017 19:11'!crearHormigaVisual: unaHormiga	| temp |	temp := self new.	temp iniciarHormiguero: unaHormiga.	^ temp! !!HormigaVisual class methodsFor: 'as yet unclassified' stamp: 'u 7/7/2017 21:14'!crearHormigaVisual: unaHormiga matriz:unaMatriz	| temp |	temp := self new.	temp iniciarHormiga: unaHormiga matriz:unaMatriz.	^ temp! !ImageMorph subclass: #HormigueroVisual	instanceVariableNames: 'unHormiguero'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!HormigueroVisual methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 12:02'!iniciarHormigueroVisual: unHorm	| imagen |	super initialize.	unHormiguero := unHorm.	imagen := Form fromFileNamed: '\Users\Giovanni Sicolo\Desktop\ParteNueva\Hormiguero.png'.	self form: imagen.	self color: unHormiguero getColor! !!HormigueroVisual methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 11:58'!update: unObjetounObjeto estaViva = false ifTrue: [ self visible: false ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HormigueroVisual class	instanceVariableNames: ''!!HormigueroVisual class methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 12:02'!crearHormigueroVisual: unHormiguero	| temp |	temp := self new.	temp iniciarHormigueroVisual: unHormiguero.	^ temp! !Object subclass: #Mundo	instanceVariableNames: 'colObjetoJuego matriz'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!Mundo methodsFor: 'Inicializador' stamp: 'u 7/3/2017 15:51'!inicializarMundo	matriz := Matrix new: 10.	colObjetoJuego := OrderedCollection new! !!Mundo methodsFor: 'MetodoPropio' stamp: 'u 7/25/2017 23:26'!obtenerPosicion: unaPosicion	^ colObjetoJuego detect: [ :elto | (elto miPosicion = unaPosicion) ] ifNone:[^nil]! !!Mundo methodsFor: 'MetodoPropio' stamp: 'u 7/3/2017 11:18'!getMatriz^matriz .! !!Mundo methodsFor: 'MetodoPropio' stamp: 'ok 6/21/2017 16:07'!agregarObjeto: unObjeto	colObjetoJuego add: unObjeto.	matriz at: (unObjeto miPosicion getFila) at:(unObjeto miPosicion getCol) put: unObjeto .! !!Mundo methodsFor: 'MetodoPropio' stamp: 'pk 6/19/2017 15:26'!verificarRango: unNumero posicion: unaPosicion|retorna|(unNumero =1) ifTrue: [ retorna:= (unaPosicion getCol -1 > 0). ].(unNumero =2) ifTrue: [ retorna:= (unaPosicion getCol +1 <= matriz columnCount  ). ].(unNumero =3) ifTrue: [ retorna:= (unaPosicion getFila -1 > 0). ].(unNumero =4) ifTrue: [ retorna:= (unaPosicion getFila +1 <= matriz rowCount ). ].^retorna.! !!Mundo methodsFor: 'MetodoPropio' stamp: 'oka 6/23/2017 17:04'!obtenerPosImportante: unaPosicion	^ matriz at: (unaPosicion getFila) at: (unaPosicion getCol)! !!Mundo methodsFor: 'MetodoPropio' stamp: 'ok 6/21/2017 15:35'!agregarHormiguero: unHormiguerocolObjetoJuego add: unHormiguero .! !!Mundo methodsFor: 'MetodoPropio' stamp: 'ok 6/21/2017 13:14'!eliminarMuertas	colObjetoJuego := colObjetoJuego select: [ :elto| elto estaViva ]! !!Mundo methodsFor: 'MetodoPropio' stamp: 'ok 6/16/2017 14:06'!eliminarHormiguero: unHormiguerocolObjetoJuego remove: unHormiguero.! !!Mundo methodsFor: 'MetodoPropio' stamp: 'Anonymous 6/28/2017 11:09'!datos"|a b hormiguero2 pos2 pos4 pos3 mundo hormiguero posicion|mundo:= Mundo crearMundo.pos2 := Posicion crearPosicion: 6 segundo: 5.pos4 := Posicion crearPosicion: 4 segundo: 5.pos3 := Posicion crearPosicion: 5 segundo: 6.posicion := Posicion crearPosicion: 5 segundo: 5.hormiguero:= Hormiguero crearHormiguero: posicion.hormiguero:= Hormiguero crearHormiguero: pos2.hormiguero2 agregarHormiga: (Guerrera crearGuerrera: pos2).hormiguero agregarHormiga: (Exploradora crearExploradora: posicion).hormiguero agregarHormiga: (Guerrera crearGuerrera: posicion).hormiguero agregarHormiga: (Exploradora crearExploradora: posicion).hormiguero agregarHormiga: (Obrera crearObrera: posicion).hormiguero agregarHormiga: (Exploradora crearExploradora: posicion).mundo agregarObjeto: hormiguero mundo agregarObjeto: hormiguero2.mundo agregarObjeto: (FuenteComida)b:= '0'.[ b=0 ] whileTrue[	a:= UIManager default.	b:= a request: 'ingrese numero'	mundo ejecutarTurno.].mundo."! !!Mundo methodsFor: 'MetodoPropio' stamp: 'ok 6/21/2017 13:29'!ejecutarTurno	colObjetoJuego		do: [ :elto | 			elto esHormiguero				ifTrue: [ elto ejecutarTurno: self ] ].	self eliminarMuertas.	^true.! !!Mundo methodsFor: 'MetodoPropio' stamp: 'u 7/5/2017 11:44'!colObjetoJuego^colObjetoJuego ! !!Mundo methodsFor: 'MetodoPropio' stamp: 'u 7/25/2017 20:55'!hayAlgo: unaPosicion	| obj res |	obj := nil.	res := self obtenerPosicion: unaPosicion.	res ~~ nil		ifTrue: [ obj := res ].	^ obj! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mundo class	instanceVariableNames: ''!!Mundo class methodsFor: 'Constructor' stamp: 'Anonymous 6/9/2017 15:45'!crearMundo|temp|temp:= self new.temp inicializarMundo.^temp.! !BorderedMorph subclass: #MundoVisual	instanceVariableNames: 'miMundo botonEjecutarTurno botonCerrar botonVariosTurnos matrizVisual botonBorde botonTest cuadroText botonSimulacion botonStop'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!MundoVisual methodsFor: 'as yet unclassified' stamp: 'u 7/31/2017 10:57'!step	miMundo ejecutarTurno.	Transcript cr.! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 17:23'!initialize	| m image i j origen matriz |	super initialize.	self color: Color gray.	self position: 350 @ 50.	self bounds: (self position extent: 1000 @ 750).	image := Form fromFileNamed: '\Users\Giovanni Sicolo\Desktop\ParteNueva\image1.jpg'.	m := ImageMorph new.	m form: image.	self addMorph: m.	m center: self center.	origen := self innerBounds origin.	botonEjecutarTurno := BotonAccion new.	botonCerrar := BotonAccion new.	botonBorde := BotonAccion new.	botonSimulacion := BotonAccion new.	botonStop := BotonAccion new.	self addMorph: botonCerrar.	self addMorph: botonEjecutarTurno.	self addMorph: botonBorde.	self addMorph: botonSimulacion.	self addMorph: botonStop .	botonCerrar position: self position + (10 @ 20).	botonCerrar label: '   						Cerrar   					 '.	botonCerrar color: Color white.	botonCerrar borderColor: Color black.	botonCerrar mouseAction: [ self delete ].	botonEjecutarTurno position: botonCerrar position + (0 @ 30).	botonEjecutarTurno label: 'Ejecutar Turno'.	botonEjecutarTurno color: Color white.	botonEjecutarTurno borderColor: Color black.	botonEjecutarTurno mouseAction: [ miMundo ejecutarTurno ].	botonBorde position: botonCerrar position + (0 @ 60).	botonBorde label: 'Mostrar Borde'.	botonBorde color: Color white.	botonBorde borderColor: Color black.	botonBorde mouseAction: [ self cambiarBorde ].	botonSimulacion position: botonCerrar position + (0 @ 90).	botonSimulacion label: 'Ejecutar Simulacion'.	botonSimulacion color: Color white.	botonSimulacion borderColor: Color black.	botonSimulacion mouseAction: [ self startStepping ].   botonStop  position: botonCerrar position + (0 @ 120).	botonStop  label: 'Ejecutar Simulacion'.	botonStop  color: Color white.	botonStop borderColor: Color black.	botonStop mouseAction: [ self stopStepping ].	miMundo := Mundo crearMundo.	matriz := miMundo getMatriz.	matrizVisual := Matrix new: matriz rowCount.	i := 1.	j := 1.	1 to: matriz rowCount * matriz columnCount do: [ :t | 		matrizVisual at: i at: j put: (self nuevoBotonVisualMatriz: i col: j).		i = matriz rowCount			ifTrue: [ i := 1.				j := j + 1 ]			ifFalse: [ i := i + 1 ] ].	self iniciarEnAleatorio! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 12:17'!iniciarEnAleatorio	"Crea dos hormigueros cada uno con 10 hormigas y dos fuentes"	| i j hormiguero1 hormiguero2 fuente1 fuente2 res temp |	res := true.	i := 10 atRandom.	j := 10 atRandom.	self hormigueroAleatorio: (Posicion crearPosicion: i segundo: j) color: Color red.	[ res ]		whileTrue: [ i := 10 atRandom.			j := 10 atRandom.			((miMundo obtenerPosicion: (Posicion crearPosicion: i segundo: j)) ~~ nil)				ifFalse: [ self hormigueroAleatorio: (Posicion crearPosicion: i segundo: j) color: Color blue.					res := false ] ].	res := true.	[ res ]		whileTrue: [ i := 10 atRandom.			j := 10 atRandom.			((miMundo obtenerPosicion: (Posicion crearPosicion: i segundo: j)) ~~ nil)				ifFalse: [ self fuenteAleatoria: (Posicion crearPosicion: i segundo: j).					res := false ] ].	res := true.	[ res ]		whileTrue: [ i := 10 atRandom.			j := 10 atRandom.			((miMundo obtenerPosicion: (Posicion crearPosicion: i segundo: j)) ~~ nil)				ifFalse: [ self fuenteAleatoria: (Posicion crearPosicion: i segundo: j).					res := false ] ]! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'u 7/5/2017 10:56'!cambiarBorde	((matrizVisual at:1 at:1)borderColor = Color transparent) ifTrue: [  	matrizVisual do: [ :elto | elto borderColor: Color gray ]]	ifFalse:[matrizVisual do: [ :elto | elto borderColor: Color transparent ]]! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 16:22'!stepTime	^100! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'u 7/7/2017 19:19'!mostrarObjetos	| i j temp |	i := 1.	j := 1.	1 to: matrizVisual rowCount * matrizVisual columnCount do: [ :t | 		miMundo colObjetoJuego			do: [ :elto | 				(elto miPosicion getFila = i & (elto miPosicion getCol = j))					ifTrue: [ (matrizVisual at: i at: j)							addMorph: (temp := HormigueroVisual crearHormigueroVisual: elto).						temp position: (matrizVisual at: i at: j) position ]  .				elto addDependent: temp ].		i = matrizVisual rowCount			ifTrue: [ i := 1.				j := j + 1 ]			ifFalse: [ i := i + 1 ] ]! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 11:51'!hormigueroAleatorio: unaPosicion color: unColor	| i horm hormVisual hormiga1 hormigaVisual |	horm := Hormiguero crearHormiguero: unaPosicion Color: unColor.	(matrizVisual at: unaPosicion getFila at: unaPosicion getCol) addMorph: (hormVisual := HormigueroVisual crearHormigueroVisual: horm).	hormVisual position: (matrizVisual at: unaPosicion getFila at: unaPosicion getCol) position.	horm addDependent: hormVisual.	1 to: 10 do: [ :temp | 		i := 3 atRandom.		i = 1			ifTrue: [ horm agregarHormiga: (hormiga1 := Exploradora crearExploradora: horm miPosicion color: horm getColor).				(matrizVisual at: horm miPosicion getFila at: horm miPosicion getCol)					addMorph: (hormigaVisual := HormigaVisual crearHormigaVisual: hormiga1 matriz: matrizVisual) ].		i = 2			ifTrue: [ horm agregarHormiga: (hormiga1 := Guerrera crearGuerrera: horm miPosicion color: horm getColor).				(matrizVisual at: horm miPosicion getFila at: horm miPosicion getCol)					addMorph: (hormigaVisual := HormigaVisual crearHormigaVisual: hormiga1 matriz: matrizVisual) ].		i = 3			ifTrue: [ horm agregarHormiga: (hormiga1 := Obrera crearObrera: horm miPosicion color: horm getColor).				(matrizVisual at: horm miPosicion getFila at: horm miPosicion getCol)					addMorph: (hormigaVisual := HormigaVisual crearHormigaVisual: hormiga1 matriz: matrizVisual) ].		hormiga1 addDependent: hormigaVisual.		hormigaVisual position: hormVisual position ].	miMundo agregarObjeto: horm! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 17:16'!openInWorld	super openInWorld .	self stopStepping! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 11:14'!iniciarEnAleatoria	"Crea dos hormigueros cada uno con 10 hormigas y dos fuentes"	| i j hormiguero1 hormiguero2 hormigueroV1 hormigueroV2 fuente1 fuente2 hormiga1 hormiga2 hormigaV1 hormigaV2 |	i := 10 atRandom.	j := 10 atRandom.	hormiguero1 := Hormiguero crearHormiguero: (Posicion crearPosicion: i segundo: j) Color: Color red.	(matrizVisual at: i at: j) addMorph: (hormigueroV1 := HormigueroVisual crearHormigueroVisual: hormiguero1).	hormigueroV1 position: (matrizVisual at: i at: j) position.	hormiguero1 addDependent: hormigueroV1.	i := 10 atRandom.	j := 10 atRandom.	hormiguero2 := Hormiguero crearHormiguero: (Posicion crearPosicion: i segundo: j) Color: Color blue.	(matrizVisual at: i at: j) addMorph: (hormigueroV2 := HormigueroVisual crearHormigueroVisual: hormiguero2).	hormigueroV2 position: (matrizVisual at: i at: j) position.	hormiguero2 addDependent: hormigueroV2.	1 to: 10 do: [ :temp | 		i := 3 atRandom.		i = 1			ifTrue: [ hormiguero1 agregarHormiga: (hormiga1 := Exploradora crearExploradora: hormiguero1 miPosicion color: hormiguero1 getColor).				(matrizVisual at: hormiguero1 miPosicion getFila at: hormiguero1 miPosicion getCol)					addMorph: (hormigaV1 := HormigaVisual crearHormigaVisual: hormiga1 matriz: matrizVisual).				hormiguero2 agregarHormiga: (hormiga2 := Guerrera crearGuerrera: hormiguero2 miPosicion color: hormiguero2 getColor).				(matrizVisual at: hormiguero2 miPosicion getFila at: hormiguero2 miPosicion getCol)					addMorph: (hormigaV2 := HormigaVisual crearHormigaVisual: hormiga2 matriz: matrizVisual) ].		i = 2			ifTrue: [ hormiguero1 agregarHormiga: (hormiga1 := Guerrera crearGuerrera: hormiguero1 miPosicion color: hormiguero1 getColor).				(matrizVisual at: hormiguero1 miPosicion getFila at: hormiguero1 miPosicion getCol)					addMorph: (hormigaV1 := HormigaVisual crearHormigaVisual: hormiga1 matriz: matrizVisual).				hormiguero2 agregarHormiga: (hormiga2 := Obrera crearObrera: hormiguero2 miPosicion color: hormiguero2 getColor).				(matrizVisual at: hormiguero2 miPosicion getFila at: hormiguero2 miPosicion getCol)					addMorph: (hormigaV2 := HormigaVisual crearHormigaVisual: hormiga2 matriz: matrizVisual) ].		i = 3			ifTrue: [ hormiguero1 agregarHormiga: (hormiga1 := Obrera crearObrera: hormiguero1 miPosicion color: hormiguero1 getColor).				(matrizVisual at: hormiguero1 miPosicion getFila at: hormiguero1 miPosicion getCol)					addMorph: (hormigaV1 := HormigaVisual crearHormigaVisual: hormiga1 matriz: matrizVisual).				hormiguero2 agregarHormiga: (hormiga2 := Exploradora crearExploradora: hormiguero2 miPosicion color: hormiguero2 getColor).				(matrizVisual at: hormiguero2 miPosicion getFila at: hormiguero2 miPosicion getCol)					addMorph: (hormigaV2 := HormigaVisual crearHormigaVisual: hormiga2 matriz: matrizVisual) ].		hormiga1 addDependent: hormigaV1.		hormiga2 addDependent: hormigaV2.		hormigaV1 position: hormigueroV1 position.		hormigaV2 position: hormigueroV2 position ].	miMundo agregarObjeto: hormiguero1.	miMundo agregarObjeto: hormiguero2! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'u 7/28/2017 17:27'!fuenteAleatoria: unaPosicion	| fuenteVisual fuente |	fuente := Hormiguero crearHormiguero: unaPosicion .	(matrizVisual at: unaPosicion getFila at: unaPosicion getCol) addMorph: (fuenteVisual  := FuenteVisual crearFuenteVisual: fuente ).	fuenteVisual  position: (matrizVisual at: unaPosicion getFila at: unaPosicion getCol) position.	fuente addDependent: FuenteVisual.! !!MundoVisual methodsFor: 'as yet unclassified' stamp: 'u 7/31/2017 11:44'!nuevoBotonVisualMatriz: unaFila col: unaCol	| temp origen a dato |	temp := BotonMatrizVisual new.	temp color: Color transparent.	origen := self innerBounds origin.	self addMorph: temp.	temp position: ((unaCol - 1) * temp width) @ ((unaFila - 1) * temp height) + origen + (175 @ 50).	temp agregarPosicion: (Posicion crearPosicion: unaFila segundo: unaCol).	temp		mouseAction: [ a := UIManager default.			dato := a chooseFrom: #('Hormiguero' 'FuenteComida') title: 'Elige que agregar'.			dato = 1				ifTrue: [ (miMundo obtenerPosicion: temp miPosicion) ~~ nil						ifFalse: [ self hormigueroAleatorio: (Posicion crearPosicion: unaFila segundo: unaCol) color: Color blue.							temp changed ] ].			dato = 2				ifTrue: [ (miMundo obtenerPosicion: temp miPosicion) ~~ nil						ifFalse: [ self fuenteAleatoria:  (Posicion crearPosicion: unaFila segundo: unaCol).							temp changed ] ] ].	^ temp	"(miMundo getMatriz at: unaFila at: unaCol) addDependant: temp"! !Object subclass: #ObjetoJuego	instanceVariableNames: 'miPosicion viva color'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!ObjetoJuego methodsFor: 'Observadores' stamp: 'ok 6/21/2017 16:06'!miPosicion^miPosicion .! !!ObjetoJuego methodsFor: 'Observadores' stamp: 'u 7/5/2017 11:14'!getColor	^ color! !!ObjetoJuego methodsFor: 'MetodoPropio' stamp: 'tpo 6/14/2017 14:37'!queSos^nil.! !!ObjetoJuego methodsFor: 'MetodoPropio' stamp: 'u 7/25/2017 20:41'!esHormiguero	^ (self queSos = 'H')! !!ObjetoJuego methodsFor: 'Modificadores' stamp: 'pk 6/19/2017 18:47'!estaViva	^ viva.! !!ObjetoJuego methodsFor: 'Modificadores' stamp: 'ok 6/16/2017 14:58'!setViva: aBooleanviva := aBoolean .! !ObjetoJuego subclass: #FuenteComida	instanceVariableNames: 'cantidad'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!FuenteComida methodsFor: 'MetodoPropio' stamp: 'tpo 6/14/2017 14:36'!queSos^'F'.! !!FuenteComida methodsFor: 'MetodoPropio' stamp: 'u 7/28/2017 12:05'!obtenerComida: cargaMaxima	| cant |	cant := 0.	cantidad >= cargaMaxima & viva		ifTrue: [ cant := cargaMaxima.			cantidad := cantidad - cargaMaxima ]		ifFalse: [ cantidad > 0 & viva				ifTrue: [ cant := cantidad.					cantidad := cantidad - cant ]				ifFalse: [ self setViva: false. 							  self changed] ].	Transcript show: 'sacaron Comida'.	^ cant! !!FuenteComida methodsFor: 'Inicializador' stamp: 'u 7/25/2017 20:44'!inicializarFuenteComida: unaPosicion"Se inicializa una fuente de comida en una posicion dada con una cantidad de comida aleatorea entre 100 y 200"	miPosicion := unaPosicion.	cantidad := 100.	cantidad:= cantidad  + 100 atRandom .	viva := true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FuenteComida class	instanceVariableNames: ''!!FuenteComida class methodsFor: 'Constructor' stamp: 'Hormigas 6/9/2017 15:50'!crearFuenteComida: unaPosicion	| temp |	temp:= self new.	temp inicializarFuenteComida: unaPosicion .	^temp.! !ObjetoJuego subclass: #Hormiga	instanceVariableNames: 'posMiHorm'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!Hormiga methodsFor: 'Inicializador' stamp: 'ok 6/21/2017 16:44'!inicializarHormiga: unaPosicion	posMiHorm := Posicion crearPosicion: (unaPosicion getFila) segundo: (unaPosicion getCol) .	miPosicion := Posicion crearPosicion: (unaPosicion getFila) segundo: (unaPosicion getCol).! !!Hormiga methodsFor: 'Inicializador' stamp: 'u 7/7/2017 19:26'!posMiHorm^posMiHorm ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Hormiga class	instanceVariableNames: ''!!Hormiga class methodsFor: 'Constructor' stamp: 'Hormigas 6/9/2017 16:01'!crearHormiga: unaPosicion	| temp |	temp:= self new .	temp inicializarHormiga: unaPosicion .	^temp.! !Hormiga subclass: #HorMovil	instanceVariableNames: 'posImportante'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!HorMovil methodsFor: 'Inicializador' stamp: 'u 7/5/2017 11:08'!inicializarHorMovil:unColor	posImportante := nil.	viva := true.	color:=unColor.! !!HorMovil methodsFor: 'Inicializador' stamp: 'ok 6/21/2017 16:35'!inicializarHorMovil	posImportante := nil.	viva:=true.! !!HorMovil methodsFor: 'MetodoPropio' stamp: 'u 7/25/2017 20:31'!obtenerPosicion: unMundo posicion: unaPosicion	^ unMundo obtenerPosicion: unaPosicion! !!HorMovil methodsFor: 'MetodoPropio' stamp: 'u 7/31/2017 14:00'!irADestino	miPosicion getFila = posImportante getFila & miPosicion getCol = posImportante getCol 		ifFalse: [ miPosicion getFila ~~ posImportante getFila				ifTrue: [ miPosicion getFila < (posImportante getFila)						ifTrue: [ miPosicion setFila: miPosicion getFila + 1 ].					miPosicion getFila > (posImportante getFila)						ifTrue: [ miPosicion setFila: miPosicion getFila - 1 ] ].			miPosicion getFila = posImportante getFila				ifTrue: [ miPosicion getCol < (posImportante getCol)						ifTrue: [ miPosicion setCol: miPosicion getCol + 1 ].					miPosicion getCol > (posImportante getCol)						ifTrue: [ miPosicion setCol: miPosicion getCol - 1 ] ] ].	Transcript show:self queSos , 'yendo a destino'.	self changed! !!HorMovil methodsFor: 'MetodoPropio' stamp: 'ok 6/21/2017 16:30'!accion1: unMundo hormiguero: unHormiguero	self alimentar: unHormiguero.	posImportante ~~ nil & viva		ifTrue: [ self llegar: unMundo hormiguero: unHormiguero ].! !!HorMovil methodsFor: 'MetodoPropio' stamp: 'u 7/31/2017 09:43'!asignar: unaPos	posImportante = nil & (unaPos ~~ nil)		ifTrue: [ posImportante := unaPos]! !!HorMovil methodsFor: 'MetodoPropio' stamp: 'u 7/31/2017 11:15'!volverHormiguero: unHormiguero	miPosicion = posImportante		ifFalse: [ miPosicion getFila ~~ posMiHorm getFila				ifTrue: [ miPosicion getFila < posMiHorm getFila						ifTrue: [ miPosicion setFila: miPosicion getFila + 1 ].					miPosicion getFila > posMiHorm getFila						ifTrue: [ miPosicion setFila: miPosicion getFila - 1 ] ].			miPosicion getFila = posMiHorm getFila				ifTrue: [ miPosicion getCol < posMiHorm getCol						ifTrue: [ miPosicion setCol: miPosicion getCol + 1 ].					miPosicion getCol > posMiHorm getCol						ifTrue: [ miPosicion setCol: miPosicion getCol - 1 ] ] ].	Transcript show: self queSos , 'volviendo de destino'.	self changed! !!HorMovil methodsFor: 'MetodoPropio' stamp: 'u 7/31/2017 11:56'!llegoADestino	| res fila col |	res := false.	fila:= posImportante getFila.	col:= posMiHorm getCol. 	posImportante ~~ nil		ifTrue: [ col = miPosicion getCol & (fila= miPosicion getFila)				ifTrue: [ res := true ] ].	^ res! !!HorMovil methodsFor: 'MetodoPropio' stamp: 'oka 6/23/2017 15:15'!alimentar: unHormiguero|res|res:= true.(posImportante = nil) ifTrue:[ res:=unHormiguero alimentar].res ifFalse: [viva := false].^res.! !!HorMovil methodsFor: 'MetodoPropio' stamp: 'pk 6/19/2017 16:49'!llegar: unMundo hormiguero: unHormiguero	| res |	res := self llegoADestino.	res		ifFalse: [ self irADestino ].	^ res! !!HorMovil methodsFor: 'MetodoPropio' stamp: 'pk 6/19/2017 15:53'!hacerTarea: unMundo hormiguero: unHormigueroself accion1: unMundo hormiguero: unHormiguero .self accion2: unMundo  hormiguero:  unHormiguero .self volverHormiguero: unHormiguero .! !!HorMovil methodsFor: 'MetodoPropio' stamp: 'pk 6/19/2017 15:51'!accion2: unMundo hormiguero: unHormigueroself subclassResponsibility .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HorMovil class	instanceVariableNames: ''!!HorMovil class methodsFor: 'Constructor' stamp: 'u 7/5/2017 11:09'!crearHorMovil: unaPosicion color: unColor	| temp |	temp := self crearHormiga: unaPosicion.	temp inicializarHorMovil:unColor.	^ temp! !!HorMovil class methodsFor: 'Constructor' stamp: 'Hormigas 6/9/2017 16:46'!crearHorMovil: unaPosicion	| temp |	temp:= self crearHormiga: unaPosicion .	temp inicializarHorMovil .	^temp.! !HorMovil subclass: #Exploradora	instanceVariableNames: 'ubicacionEncontrada colMisUbicaciones ultimoMov'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!Exploradora methodsFor: 'Inicializador' stamp: 'u 7/28/2017 12:22'!inicializarExploradora	ubicacionEncontrada := nil.	colMisUbicaciones := OrderedCollection new.	ultimoMov := 0.! !!Exploradora methodsFor: 'MetodoPropio' stamp: 'ok 6/26/2017 17:30'!verificarPosicion: unMundo	| tupla obj temp |	tupla := nil.	obj := unMundo hayAlgo: miPosicion.	obj ~~ nil		& (miPosicion getFila ~~ posMiHorm getFila | (miPosicion getCol ~~ posMiHorm getCol))		ifTrue: [ temp := obj queSos ].	temp ~~ nil		ifTrue: [ ubicacionEncontrada := Posicion				crearPosicion: temp				segundo: (Posicion crearPosicion: miPosicion getFila segundo: miPosicion getCol).			colMisUbicaciones				add: (Posicion crearPosicion: miPosicion getFila segundo: miPosicion getCol). 				Transcript show: '--Exploradora encontro algo--'].! !!Exploradora methodsFor: 'MetodoPropio' stamp: 'Anonymous 6/28/2017 11:30'!accion2: unMundo hormiguero: unHormiguero	ubicacionEncontrada = nil		ifTrue: [ self verificarPosicion: unMundo.].! !!Exploradora methodsFor: 'MetodoPropio' stamp: 'u 7/31/2017 11:11'!volverHormiguero: unHormiguero		Transcript show: 'Exploradora Volviendo'.		ubicacionEncontrada ~~ nil		ifTrue: [ super volverHormiguero: unHormiguero.			miPosicion = posMiHorm				ifTrue: [ unHormiguero agregarUbicacion: ubicacionEncontrada.					ubicacionEncontrada := nil ] ]! !!Exploradora methodsFor: 'MetodoPropio' stamp: 'u 7/28/2017 12:33'!accion1: unMundo hormiguero: unHormiguero	| temp res nro |	res := false.	ubicacionEncontrada = nil		ifTrue: [ [ res = false ]				whileTrue: [ nro := 4 atRandom.					temp := true.					nro = 1 & (ultimoMov = 2)						ifTrue: [ temp := false ].					nro = 2 & (ultimoMov = 1)						ifTrue: [ temp := false ].					nro = 3 & (ultimoMov = 4)						ifTrue: [ temp := false ].				   nro = 4 & (ultimoMov = 3)						ifTrue: [ temp := false ].					temp						ifTrue: [ res := self moverse: nro mundo: unMundo ] ] ]! !!Exploradora methodsFor: 'MetodoPropio' stamp: 'tpo 6/14/2017 14:36'!queSos^'E'.! !!Exploradora methodsFor: 'MetodoPropio' stamp: 'oka 6/23/2017 17:57'!yaEncontro	| res |	res := false.	colMisUbicaciones		do: [ :elto | 			elto = miPosicion				ifTrue: [ ^ true ] ].	^ res! !!Exploradora methodsFor: 'MetodoPropio' stamp: 'u 7/28/2017 12:34'!moverse: unNumero mundo: unMundo	| res |	(res := unMundo verificarRango: unNumero posicion: miPosicion)		ifTrue: [ unNumero = 1				ifTrue: [ miPosicion setCol: miPosicion getCol - 1.					ultimoMov := 1 ].			unNumero = 2				ifTrue: [ miPosicion setCol: miPosicion getCol + 1.					ultimoMov := 2 ].			unNumero = 3				ifTrue: [ miPosicion setFila: miPosicion getFila - 1.					ultimoMov := 3 ].			unNumero = 4				ifTrue: [ miPosicion setFila: miPosicion getFila + 1 .					ultimoMov := 4.] ].	Transcript show: '--Exploradora se movio--'.	self changed.	^ res! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Exploradora class	instanceVariableNames: ''!!Exploradora class methodsFor: 'Constructor' stamp: 'u 7/5/2017 11:16'!crearExploradora: unaPosicion color:unColor	| temp |	temp := self crearHorMovil: unaPosicion color:unColor.	temp inicializarExploradora.	^ temp! !!Exploradora class methodsFor: 'Constructor' stamp: 'Hormigas 6/9/2017 16:50'!crearExploradora: unaPosicion	| temp |	temp:= self crearHorMovil: unaPosicion.	temp inicializarExploradora.	^temp.! !HorMovil subclass: #Guerrera	instanceVariableNames: 'botin'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!Guerrera methodsFor: 'Inicializador' stamp: 'Hormigas 6/9/2017 16:50'!inicializarGuerreraviva := true.botin := 0.! !!Guerrera methodsFor: 'MetodoPropio' stamp: 'Anonymous 6/23/2017 22:01'!queSos	^'G'! !!Guerrera methodsFor: 'MetodoPropio' stamp: 'u 7/31/2017 09:35'!volverHormiguero: unHormiguero	posImportante = nil		ifTrue: [ super volverHormiguero: unHormiguero.			miPosicion = posMiHorm 				ifTrue: [ unHormiguero agregarBotin: botin.					botin > 0						ifTrue: [ Transcript show: '--Guerrera dejo botin--' ] ] ]! !!Guerrera methodsFor: 'MetodoPropio' stamp: 'Anonymous 6/23/2017 19:48'!eliminarHormigueroEnemigo: unMundo hormigueroEnemigo: unHormigueroEnemigo	botin := unHormigueroEnemigo obtenerBotin.	posImportante := nil.	unHormigueroEnemigo setViva:false.	! !!Guerrera methodsFor: 'MetodoPropio' stamp: 'u 7/31/2017 10:40'!accion2: unMundo hormiguero: unHormiguero	| res nro valorDef hE |	res := 0.	posImportante ~~ nil		ifTrue: [ hE := self obtenerPosicion: unMundo posicion: miPosicion.			self llegoADestino				ifTrue: [ [ res = 0 & (hE ~~ nil )]						whileTrue: [ hE := self obtenerPosicion: unMundo posicion: miPosicion.							hE ~~ nil								ifTrue: [ nro := 100 atRandom.									valorDef := hE obtenerValorDefensa.									res := 1.									Transcript cr.									Transcript show: valorDef asString , '---' , nro asString.									nro > valorDef										ifTrue: [ res := hE eliminarHormiga ].									res = 2										ifTrue: [ self eliminarHormigueroEnemigo: unMundo hormigueroEnemigo: hE ] ] ] ].			res = 1				ifTrue: [ viva := false.					posImportante := nil.					Transcript show: '--Guerrera realizo ataque-- ' ] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Guerrera class	instanceVariableNames: ''!!Guerrera class methodsFor: 'Constructor' stamp: 'u 7/5/2017 11:16'!crearGuerrera: unaPosicion color: unColor	| temp |	temp := self crearHorMovil: unaPosicion color: unColor.	temp inicializarGuerrera.	^ temp! !!Guerrera class methodsFor: 'Constructor' stamp: 'Hormigas 6/9/2017 16:51'!crearGuerrera: unaPosicion	| temp |	temp:= self crearHorMovil: unaPosicion .	temp inicializarGuerrera .	^temp.	! !ObjetoJuego subclass: #Hormiguero	instanceVariableNames: 'colHormigas reina camaraEspecial colUbicaciones'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!Hormiguero methodsFor: 'MetodoPropio' stamp: 'Anonymous 6/28/2017 13:24'!eliminarHormiga	| valor v cont |	cont := 1.	valor := 2.	v := nil.	[ (v = nil) & (cont <= colHormigas size) ]		whileTrue: [ (((colHormigas at: cont) queSos) ='G') & ((colHormigas at: cont) estaViva)				& ((colHormigas at: cont )miPosicion = miPosicion)				ifTrue: [ v := colHormigas at: cont ].			cont := cont + 1 ].	v ~~ nil		ifTrue: [ v setViva: false.			valor := 0 ].	^ valor! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'Anonymous 6/14/2017 13:39'!alimentar|res|res:= false.(camaraEspecial >= 1)ifTrue: [ res:=true. camaraEspecial := camaraEspecial -1. ].^res.! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'tpo 6/14/2017 14:35'!queSos^'H'.! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'pk 6/19/2017 16:53'!obtenerValorDefensa|valorDef|valorDef:= 100.valorDef:= valorDef atRandom .^valorDef .! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'ok 6/15/2017 18:28'!agregarHormiga: unaHormigacolHormigas add: unaHormiga.! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'Anonymous 6/28/2017 11:39'!asignarDeColUbicacion: char	| res subElto|	res := nil.	colUbicaciones		do: [ :elto | 			| temp |			subElto:= elto getCol.			temp := 2 atRandom.			elto getFila = char & (temp = 1)				ifTrue: [ res := Posicion crearPosicion: subElto getFila segundo: subElto getCol.					^ res ] ].	^ res! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'ok 6/15/2017 19:17'!agregarBotin: unBotincamaraEspecial := camaraEspecial + unBotin.! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'ok 6/15/2017 21:29'!obtenerBotin^self getCamaraEspecial .! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'u 7/25/2017 21:00'!setViva: aBoolean	"cambia el estado del hormiguero a vivo(true) o muerto(false), en caso de muertas(false) tambien cambia el estado de sus hormigas a muertas(false) "	viva := aBoolean.	aBoolean = false		ifTrue: [ colHormigas do: [ :elto | elto setViva: aBoolean ] ]! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'ok 6/15/2017 22:22'!agregarComida: unaCargaActualcamaraEspecial := camaraEspecial + unaCargaActual .! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'u 7/31/2017 11:21'!agregarUbicacion: ubicacionEncontrada	| cont |	colUbicaciones				add: (Posicion crearPosicion: ubicacionEncontrada getFila segundo: ubicacionEncontrada).	"Agrega una ubicacion a la coleccion de ubicaciones encontradas en caso de que esta no la hayan encontrado anteriormente		 cont := 0.	colUbicaciones		do: [ :elto | 			elto getCol = ubicacionEncontrada getCol				ifTrue: [ cont := cont + 1 ] ].	cont = 0		ifTrue: [ colUbicaciones				add: (Posicion crearPosicion: ubicacionEncontrada getFila segundo: ubicacionEncontrada getCol) ]  "! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'ok 6/21/2017 12:22'!eliminarMuertas	colHormigas:= colHormigas select: [ :elto | elto estaViva . ].	! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'u 7/31/2017 12:06'!asignarTarea	| temp |	colHormigas		do: [ :elto | 			elto queSos = 'O'				ifTrue: [ temp := self asignarDeColUbicacion: 'F'.					elto asignar: temp ].			elto queSos = 'G'				ifTrue: [ temp := self asignarDeColUbicacion: 'H'.					elto asignar: temp ] .				Transcript cr.				temp~~nil ifTrue: [  				Transcript show:'a', elto queSos, 'se le asigno',  temp getFila asString ,  temp getCol asString ]]! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'ok 6/20/2017 20:28'!eliminarMuertas: unaHormiga objetoJuego: unObjetoJuegounObjetoJuego queSos! !!Hormiguero methodsFor: 'MetodoPropio' stamp: 'u 7/28/2017 12:00'!ejecutarTurno: unMundo	reina hacerTarea: unMundo hormiguero: self.	colHormigas do: [ :elto | elto hacerTarea: unMundo hormiguero: self ].	self asignarTarea.	self eliminarMuertas.	self changed.! !!Hormiguero methodsFor: 'Inicializador' stamp: 'ok 6/21/2017 16:15'!inicializarHormiguero: unaPosicion	miPosicion := unaPosicion.	camaraEspecial := 100.	colHormigas := OrderedCollection new.	colUbicaciones := OrderedCollection new.	reina := Reina crearReina: unaPosicion.	viva:=true.! !!Hormiguero methodsFor: 'Inicializador' stamp: 'u 7/25/2017 20:45'!inicializarHormiguero: unaPosicion color: unColor	miPosicion := unaPosicion.	camaraEspecial  := 50.	camaraEspecial  := camaraEspecial  + 100 atRandom.	colHormigas := OrderedCollection new.	colUbicaciones := OrderedCollection new.	reina := Reina crearReina: unaPosicion.	viva := true.	color := unColor! !!Hormiguero methodsFor: 'Observadores' stamp: 'ok 6/15/2017 21:15'!getCamaraEspecial^camaraEspecial.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Hormiguero class	instanceVariableNames: ''!!Hormiguero class methodsFor: 'Constructor' stamp: 'Hormigas 6/9/2017 15:58'!crearHormiguero: unaPosicion  	| temp |	temp:= self new.	temp inicializarHormiguero: unaPosicion .	^temp.! !!Hormiguero class methodsFor: 'Constructor' stamp: 'u 7/5/2017 11:12'!crearHormiguero: unaPosicion Color: unColor	| temp |	temp := self new.	temp inicializarHormiguero: unaPosicion color:unColor.	^ temp! !HorMovil subclass: #Obrera	instanceVariableNames: 'cargaActual'	classVariableNames: 'cargaMaxima'	poolDictionaries: ''	category: 'TPO_Hormigas'!!Obrera methodsFor: 'Inicializador' stamp: 'Hormigas 6/9/2017 16:53'!inicializarObreracargaActual := 0.viva := true.! !!Obrera methodsFor: 'MetodoPropio' stamp: 'tpo 6/14/2017 14:36'!queSos^'O'.! !!Obrera methodsFor: 'MetodoPropio' stamp: 'u 7/25/2017 21:35'!accion2: unMundo hormiguero: unHormiguero	| fuenteComida cant |	posImportante ~~ nil & viva		ifTrue: [ self llegoADestino				ifTrue: [ fuenteComida := unMundo obtenerPosicion: posImportante.					cant := fuenteComida obtenerComida: cargaMaxima.					cargaActual := cant.					posImportante := nil.					Transcript show: '--Obrera saco comida--' ] ]! !!Obrera methodsFor: 'MetodoPropio' stamp: 'u 7/31/2017 11:01'!volverHormiguero: unHormiguero	posImportante = nil		ifTrue: [ super volverHormiguero: unHormiguero.			miPosicion = posMiHorm 				ifTrue: [ unHormiguero agregarComida: cargaActual.					cargaActual > 0						ifTrue: [ Transcript show: '--Obrera agrego comida--' ] ] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Obrera class	instanceVariableNames: ''!!Obrera class methodsFor: 'Constructor' stamp: 'oka 6/23/2017 16:40'!crearObrera: unaPosicion	| temp |	temp := self crearHorMovil: unaPosicion.	temp inicializarObrera.	self inicializarCargaMaxima.		^ temp! !!Obrera class methodsFor: 'Constructor' stamp: 'u 7/5/2017 11:17'!crearObrera: unaPosicion color: unColor	| temp |	temp := self crearHorMovil: unaPosicion color: unColor.	temp inicializarObrera.	self inicializarCargaMaxima.	^ temp! !!Obrera class methodsFor: 'Constructor' stamp: 'Hormigas 6/9/2017 16:54'!inicializarCargaMaximacargaMaxima := 3.! !Object subclass: #Posicion	instanceVariableNames: 'fila columna'	classVariableNames: ''	poolDictionaries: ''	category: 'TPO_Hormigas'!!Posicion methodsFor: 'Observadores' stamp: 'tpo 6/14/2017 14:12'!getFila^fila .! !!Posicion methodsFor: 'Observadores' stamp: 'tpo 6/14/2017 14:13'!getCol^columna.! !!Posicion methodsFor: 'Inicializador' stamp: 'tpo 6/14/2017 15:32'!inicializarPosicion: unPrimero segundo: unSegundo fila:= unPrimero.columna:= unSegundo..! !!Posicion methodsFor: 'Modificadores' stamp: 'tpo 6/14/2017 14:14'!setCol: unaColcolumna := unaCol .! !!Posicion methodsFor: 'Modificadores' stamp: 'tpo 6/14/2017 14:13'!setFila: unaFilafila := unaFila .! !!Posicion methodsFor: 'Modificadores' stamp: 'u 7/28/2017 12:15'!= aPosicion(aPosicion ~~ nil) ifTrue:  [  ^((self getCol = (aPosicion getCol)) &(self getFila = (aPosicion getFila) )).] ifFalse:  [ ^ false ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Posicion class	instanceVariableNames: ''!!Posicion class methodsFor: 'Constructor' stamp: 'ok 6/21/2017 16:00'!crearPosicion: unPrimero segundo: unSegundo |temp|temp:= self new.temp inicializarPosicion:unPrimero segundo: unSegundo   .^temp! !Hormiga subclass: #Reina	instanceVariableNames: 'cantAlimento'	classVariableNames: 'comidaMax'	poolDictionaries: ''	category: 'TPO_Hormigas'!!Reina methodsFor: 'MetodoPropio' stamp: 'ok 6/16/2017 15:28'!hacerTarea: unMundo hormiguero: unHormigueroself accion1: unMundo hormiguero: unHormiguero.self accion2: unMundo  hormiguero: unHormiguero . ! !!Reina methodsFor: 'MetodoPropio' stamp: 'ok 6/21/2017 16:21'!alimentar: unHormiguero	| res |	res := unHormiguero alimentar.	^res.	! !!Reina methodsFor: 'MetodoPropio' stamp: 'ok 6/16/2017 14:58'!accion1: unMundo hormiguero: unHormiguero(self alimentar: unHormiguero )ifTrue: [ cantAlimento := cantAlimento +1. ]  ifFalse:  [ unHormiguero setViva: false ].! !!Reina methodsFor: 'MetodoPropio' stamp: 'u 7/5/2017 11:15'!accion2: unMundo hormiguero: unHormiguero	| hormiga nro |	cantAlimento = comidaMax		ifTrue: [ nro := 10 atRandom.			nro > 2 & (nro <= 4)				ifTrue: [ hormiga := Exploradora crearExploradora: miPosicion color:(unHormiguero getColor).					unHormiguero agregarHormiga: hormiga ].			nro >= 5 & (nro <= 7)				ifTrue: [ hormiga := Obrera crearObrera: miPosicion color:(unHormiguero getColor).					unHormiguero agregarHormiga: hormiga ].			nro > 8				ifTrue: [ hormiga := Guerrera crearGuerrera: miPosicion color:(unHormiguero getColor).					unHormiguero agregarHormiga: hormiga ].			cantAlimento := 0 ]! !!Reina methodsFor: 'Inicializador' stamp: 'Hormigas 6/9/2017 16:15'!inicializarReinacantAlimento := 0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Reina class	instanceVariableNames: ''!!Reina class methodsFor: 'Constructor' stamp: 'ok 6/21/2017 16:01'!crearReina: unaPosicion	| temp |	temp:= self crearHormiga: unaPosicion .	temp inicializarReina.	self inicializarComidaMax.	^temp.! !!Reina class methodsFor: 'Constructor' stamp: 'Hormigas 6/9/2017 16:12'!inicializarComidaMaxcomidaMax := 3.! !